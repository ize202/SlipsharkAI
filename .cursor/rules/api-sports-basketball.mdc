---
description: this is the api sports basketball documentation
globs: 
alwaysApply: false
---
# API SPORTS BASKETBALL DOC

## Important Note

I'm using an API Sports account not a RapidAPI account so whereever you see RapidAPI, you should use API Sports.
e.g

```python
    headers = {
    'x-rapidapi-host': "v1.basketball.api-sports.io",
    'x-rapidapi-key': "XxXxXxXxXxXxXxXxXxXxXxXx"
    }
```

should be replaced with

```python
    headers = {
    'x-apisports-host': "v1.basketball.api-sports.io",
    'x-apisports-key': "XxXxXxXxXxXxXxXxXxXxXxXx"
    }
```

## Authentication

We uses API keys to allow access to the API. You can register a new API key in rapidapi or directly on our dashboard.

The accounts on RapidAPI and on our Dashboard are dissociated. Each of these registration methods has its own URL and API-KEY. You must therefore adapt your scripts according to your subscription by adapting the URL and your API-KEY.

RAPIDAPI : https://api-basketball.p.rapidapi.com/

API-SPORTS : https://v1.basketball.api-sports.io/

Our API expects for the API key to be included in all API requests to the server in a header that looks like the following:

Make sure to replace XxXxXxXxXxXxXxXxXxXxXxXx with your API key.

REQUESTS HEADERS & CORS

The API is configured to work only with GET requests and allows only the headers listed below:

x-rapidapi-host
x-rapidapi-key
x-apisports-key
If you make non-GET requests or add headers that are not in the list, you will receive an error from the API.

Some frameworks (especially in JS, nodeJS..) automatically add extra headers, you have to make sure to remove them in order to get a response from the API.

## Sample scripts

Here are some examples of how the API is used in the main development languages.

You have to replace {endpoint} by the real name of the endpoint you want to call, like leagues or games for example. In all the sample scripts we will use the leagues endpoint as example.

Also you will have to replace XxXxXxXxXxXxXxXxXxXxXx with your API-KEY provided in the dashboard 

### Python

http.client

```python
import http.client

conn = http.client.HTTPSConnection("v1.basketball.api-sports.io")

headers = {
    'x-rapidapi-host': "v1.basketball.api-sports.io",
    'x-rapidapi-key': "XxXxXxXxXxXxXxXxXxXxXxXx"
    }

conn.request("GET", "/leagues", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))
```

requests

```python
url = "https://v1.basketball.api-sports.io/leagues"

payload={}
headers = {
  'x-rapidapi-key': 'XxXxXxXxXxXxXxXxXxXxXxXx',
  'x-rapidapi-host': 'v1.basketball.api-sports.io'
}

response = requests.request("GET", url, headers=headers, data=payload)

print(response.text)
```

## Changelog

(1.5.6)
Endpoint leagues

Add field coverage
Endpoint games

Add endpoint games/statistics/teams
Add endpoint games/statistics/players
Add field venue
Add endpoint players

## Endpoints

### Timezones

Get the list of available timezone to be used in the games endpoint.

This endpoint does not require any parameters.

Request:

```python
import http.client

conn = http.client.HTTPSConnection("v1.basketball.api-sports.io")

headers = {
    'x-rapidapi-host': "v1.basketball.api-sports.io",
    'x-rapidapi-key': "XxXxXxXxXxXxXxXxXxXxXxXx"
    }

conn.request("GET", "/timezone", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))
```

Response:

```json
{
  "get": "timezone",
  "parameters": [],
  "errors": [],
  "results": 425,
  "response": [
    "Africa/Abidjan",
    "Africa/Accra",
    "Africa/Addis_Ababa",
    "Africa/Algiers",
    "Africa/Asmara"
  ]
}
```

### Seasons

All seasons can be used in other endpoints as filters.

This endpoint does not require any parameters.

Request:

```python
import http.client

conn = http.client.HTTPSConnection("v1.basketball.api-sports.io")

headers = {
    'x-rapidapi-host': "v1.basketball.api-sports.io",
    'x-rapidapi-key': "XxXxXxXxXxXxXxXxXxXxXxXx"
    }

conn.request("GET", "/seasons", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))
```

Response:

```json
{
  "get": "seasons",
  "parameters": [],
  "errors": [],
  "results": 8,
  "response": [
    "2015-2016",
    "2016-2017",
    2017,
    "2017-2018",
    2018,
    "2018-2019",
    2019,
    "2019-2020"
  ]
}
```

### Countries

Get the list of available countries.

The id name and code fields can be used in other endpoints as filters.

All the parameters of this endpoint can be used together.
query Parameters
id	
integer
The id of the country

name	
string
Example: name=USA
The name of the country

code	
string = 2 characters
Example: code=EN
The code of the country

search	
string >= 3 characters
Example: search=USA

Request:

```python
import http.client

conn = http.client.HTTPSConnection("v1.basketball.api-sports.io")

headers = {
    'x-rapidapi-host': "v1.basketball.api-sports.io",
    'x-rapidapi-key': "XxXxXxXxXxXxXxXxXxXxXxXx"
    }

conn.request("GET", "/countries", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))
```

Response:

```json
{
  "get": "countries",
  "parameters": {
    "search": "usa"
  },
  "errors": [],
  "results": 1,
  "response": [
    {
      "id": 5,
      "name": "USA",
      "code": "US",
      "flag": "https://media.api-football.com/flags/us.svg"
    }
  ]
}
```

### Leagues

Get the list of available leagues and cups.

The league id are unique in the API and leagues keep it across all seasons

This endpoint also returns the coverage of each competition, which makes it possible to know what is available for leagues or cups.

The values returned by the coverage indicate the data available at the moment you call the API, so for a competition that has not yet started, it is normal to have all the features set to False. This will be updated once the competition has started.

The coverage of a competition can vary from season to season and values set to True do not guarantee 100% data availability.

You can find all the leagues ids on our Dashboard.

Most of the parameters of this endpoint can be used together.

query Parameters
id	
integer
The id of the league

name	
string
Example: name=NBA
The name of the league

country_id	
integer
The id of the country

country	
string
Example: country=USA
The name of the country

type	
string
Enum: "league" "cup"
Example: type=league
The type of the league

season	
string [ 4 .. 9 ] characters YYYY or YYYY-YYYY
Example: season=2021-2022
The season of the league

search	
string >= 3 characters
Example: search=NBA
The name of the league

code	
string = 2 characters
Example: code=FR
The code of the country

Request:

```python
import http.client

conn = http.client.HTTPSConnection("v1.basketball.api-sports.io")

headers = {
    'x-rapidapi-host': "v1.basketball.api-sports.io",
    'x-rapidapi-key': "XxXxXxXxXxXxXxXxXxXxXxXx"
    }

conn.request("GET", "/leagues", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))
```

Response:

```json
{
  "get": "leagues",
  "parameters": {
    "id": "12",
    "season": "2023-2024"
  },
  "errors": [],
  "results": 1,
  "response": [
    {
      "id": 12,
      "name": "NBA",
      "type": "League",
      "logo": "https://media.api-sports.io/basketball/leagues/12.png",
      "country": {
        "id": 5,
        "name": "USA",
        "code": "US",
        "flag": "https://media.api-sports.io/flags/us.svg"
      },
      "seasons": [
        {
          "season": "2023-2024",
          "start": "2023-10-05",
          "end": "2024-04-14",
          "coverage": {
            "games": {
              "statistics": {
                "teams": true,
                "players": true
              }
            },
            "standings": true,
            "players": true,
            "odds": true
          }
        }
      ]
    }
  ]
}
```

### Teams

Get data about teams.

The team id are unique in the API and teams keep it among all the leagues/cups in which they participate.

You can find all the teams ids on our Dashboard.

This endpoint requires at least one parameter.

query Parameters
id	
integer
The id of the team

name	
string
Example: name=Denver Nuggets
The name of the team

country_id	
integer
The id of the country

country	
string
The name of the country

league	
integer
The id of the league

season	
string [ 4 .. 9 ] characters YYYY or YYYY-YYYY
Example: season=2021-2022
The season of the league

search	
string >= 3 characters
Example: search=Denver
The name of the team

Request:

```python
import http.client

conn = http.client.HTTPSConnection("v1.basketball.api-sports.io")

headers = {
    'x-rapidapi-host': "v1.basketball.api-sports.io",
    'x-rapidapi-key': "XxXxXxXxXxXxXxXxXxXxXxXx"
    }

conn.request("GET", "/teams?id=139", headers=headers)

res = conn.getresponse()
data = res.read()
```

Response:

```json
{
  "get": "teams",
  "parameters": {
    "name": "Denver Nuggets"
  },
  "errors": [],
  "results": 1,
  "response": [
    {
      "id": 139,
      "name": "Denver Nuggets",
      "nationnal": false,
      "logo": null,
      "country": {
        "id": 5,
        "name": "USA",
        "code": "US",
        "flag": "https://media.api-football.com/flags/us.svg"
      }
    }
  ]
}
```

#### Statistics

query Parameters
league
required
integer
The id of the league

season
required
string [ 4 .. 9 ] characters YYYY or YYYY-YYYY
Example: season=2021-2022
The season of the league

team
required
integer
The id of the team

date	
stringYYYY-MM-DD
Example: date=2021-05-12
A Limit Date

Request:

```python
import http.client

conn = http.client.HTTPSConnection("v1.basketball.api-sports.io")

headers = {
    'x-rapidapi-host': "v1.basketball.api-sports.io",
    'x-rapidapi-key': "XxXxXxXxXxXxXxXxXxXxXxXx"
    }

conn.request("GET", "/statistics?season=2019-2020&team=139&league=12", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))
```

Response:

```json
{
  "get": "statistics",
  "parameters": {
    "league": "12",
    "season": "2019-2020",
    "team": "139"
  },
  "errors": [],
  "results": 5,
  "response": {
    "league": {
      "id": 12,
      "name": "NBA",
      "type": "League",
      "season": "2019-2020",
      "logo": null
    },
    "country": {
      "id": 5,
      "name": "USA",
      "code": "US",
      "flag": "https://media.api-football.com/flags/us.svg"
    },
    "team": {
      "id": 139,
      "name": "Denver Nuggets",
      "logo": null
    },
    "games": {
      "played": {
        "home": 9,
        "away": 9,
        "all": 18
      },
      "wins": {
        "home": {
          "total": 7,
          "percentage": "0.778"
        },
        "away": {
          "total": 8,
          "percentage": "0.889"
        },
        "all": {
          "total": 15,
          "percentage": "0.833"
        }
      },
      "draws": {
        "home": {
          "total": 0,
          "percentage": "0.000"
        },
        "away": {
          "total": 0,
          "percentage": "0.000"
        },
        "all": {
          "total": 0,
          "percentage": "0.000"
        }
      },
      "loses": {
        "home": {
          "total": 2,
          "percentage": "0.222"
        },
        "away": {
          "total": 1,
          "percentage": "0.111"
        },
        "all": {
          "total": 3,
          "percentage": "0.167"
        }
      }
    },
    "points": {
      "for": {
        "total": {
          "home": 956,
          "away": 961,
          "all": 1917
        },
        "average": {
          "home": "106.2",
          "away": "106.8",
          "all": "106.5"
        }
      },
      "against": {
        "total": {
          "home": 911,
          "away": 902,
          "all": 1813
        },
        "average": {
          "home": "101.2",
          "away": "100.2",
          "all": "100.7"
        }
      }
    }
  }
}
```

### Players
Get data about players.

The players id are unique in the API and players keep it among all the leagues/cups in which they participate.

This endpoint requires at least one parameter.

query Parameters
id	
integer
The id of the player

team	
integer
The id of the team

season	
string [ 4 .. 9 ] characters YYYY or YYYY-YYYY
Example: season=2023-2024
A valid season

search	
string >= 3 characters
Example: search=Malith
The name of the player

Request:

```python
import http.client

conn = http.client.HTTPSConnection("v1.basketball.api-sports.io")

headers = {
    'x-rapidapi-host': "v1.basketball.api-sports.io",
    'x-rapidapi-key': "XxXxXxXxXxXxXxXxXxXxXxXx"
    }

conn.request("GET", "/basketball/players?team=1&season=2023-2024", headers=headers)

res = conn.getresponse()
data = res.read()
```

Response:

```json
{
  "get": "players",
  "parameters": {
    "team": "1",
    "season": "2023-2024"
  },
  "errors": [],
  "results": 16,
  "response": [
    {
      "id": 11636,
      "name": "B. Newley",
      "number": null,
      "country": null,
      "position": null,
      "age": null
    },
    {
      "id": 4,
      "name": "Blogg Campbell",
      "number": "3",
      "country": "Australia",
      "position": "Guard",
      "age": 20
    },
    {
      "id": 13,
      "name": "Bowen Kyle",
      "number": "14",
      "country": "Australia",
      "position": "Forward",
      "age": 23
    },
    {
      "id": 5,
      "name": "Cameron Flynn",
      "number": "11",
      "country": "New Zealand",
      "position": "Guard",
      "age": 23
    },
    {
      "id": 6,
      "name": "Clark Ian",
      "number": "21",
      "country": "USA",
      "position": "Guard",
      "age": 32
    },
    {
      "id": 7,
      "name": "Dellavedova Matthew",
      "number": "8",
      "country": "Australia",
      "position": "Guard",
      "age": 33
    },
    {
      "id": 8,
      "name": "Goulding Chris",
      "number": "43",
      "country": "Australia",
      "position": "Guard",
      "age": 35
    },
    {
      "id": 1,
      "name": "Hukporti Ariel",
      "number": "15",
      "country": "Germany",
      "position": "Center",
      "age": 21
    },
    {
      "id": 9,
      "name": "Ili Shea",
      "number": "51",
      "country": "New Zealand",
      "position": "Guard",
      "age": 31
    },
    {
      "id": 14,
      "name": "Koppens Tom",
      "number": "30",
      "country": "Australia",
      "position": "Forward",
      "age": 20
    },
    {
      "id": 10,
      "name": "Krebs Tanner",
      "number": "13",
      "country": "Australia",
      "position": "Guard",
      "age": 28
    },
    {
      "id": 2,
      "name": "Loe Rob",
      "number": "2",
      "country": "New Zealand",
      "position": "Center",
      "age": 32
    },
    {
      "id": 3,
      "name": "Lual-Acuil Joseph",
      "number": null,
      "country": "South Sudan",
      "position": "Center",
      "age": 29
    },
    {
      "id": 11,
      "name": "Machar Malith",
      "number": "9",
      "country": "Australia",
      "position": "Guard",
      "age": null
    },
    {
      "id": 15,
      "name": "Travers Luke",
      "number": "23",
      "country": "Australia",
      "position": "Forward",
      "age": 22
    },
    {
      "id": 12,
      "name": "Triplett Zac",
      "number": "1",
      "country": "Australia",
      "position": "Guard",
      "age": 22
    }
  ]
}
```

### Standings
Get the standings for a league.

Return a table of one or more rankings according to the league / cup. Some competitions have several rankings in a year, regular season, pre season etc…

To know the list of available stages or groups you have to use the endpoint standings/stages or standings/groups

Standings are updated every hours

query Parameters
league
required
integer
The id of the league

season
required
string [ 4 .. 9 ] characters YYYY or YYYY-YYYY
Example: season=2021-2022
The season of the league

team	
integer
The id of the team

stage	
string
Example: stage=NBA - Regular Season
A valid stage

group	
string
Example: group=Eastern Conference
A valid group

Request:

```python
import http.client

conn = http.client.HTTPSConnection("v1.basketball.api-sports.io")

headers = {
    'x-rapidapi-host': "v1.basketball.api-sports.io",
    'x-rapidapi-key': "XxXxXxXxXxXxXxXxXxXxXxXx"
    }

conn.request("GET", "/standings?league=12&season=2019-2020", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))
```

Response:

```json
{
  "get": "standings",
  "parameters": {
    "league": "12",
    "season": "2019-2020",
    "team": "137"
  },
  "errors": [],
  "results": 1,
  "response": [
    [
      {
        "position": 14,
        "stage": "NBA - Regular Season",
        "group": {
          "name": "Eastern Conference",
          "points": null
        },
        "team": {
          "id": 137,
          "name": "Cleveland Cavaliers",
          "logo": null
        },
        "league": {
          "id": 12,
          "name": "NBA",
          "type": "League",
          "season": "2019-2020",
          "logo": null
        },
        "country": {
          "id": 5,
          "name": "USA",
          "code": "US",
          "flag": "https://media.api-football.com/flags/us.svg"
        },
        "games": {
          "played": 15,
          "win": {
            "total": 4,
            "percentage": "0.267"
          },
          "lose": {
            "total": 11,
            "percentage": "0.733"
          }
        },
        "points": {
          "for": 1559,
          "against": 1682
        },
        "form": "LLLLL",
        "description": null
      }
    ]
  ]
}
```

#### Standings Stages
Get the list of available stages for a league to be used in the standings endpoint.

query Parameters
league
required
integer
The id of the league

season
required
string [ 4 .. 9 ] characters YYYY or YYYY-YYYY
Example: season=2021-2022
The season of the league

Request:

```python
import http.client

conn = http.client.HTTPSConnection("v1.basketball.api-sports.io")

headers = {
    'x-rapidapi-host': "v1.basketball.api-sports.io",
    'x-rapidapi-key': "XxXxXxXxXxXxXxXxXxXxXxXx"
    }

conn.request("GET", "/standings/stages", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))
```

Response:

```json
{
  "get": "standings/stages",
  "parameters": {
    "league": "12",
    "season": "2019-2020"
  },
  "errors": [],
  "results": 1,
  "response": [
    "NBA - Regular Season"
  ]
}
```

#### Standings Groups
Get the list of available groups for a league to be used in the standings endpoint.

query Parameters
league
required
integer
The id of the league

season
required
string [ 4 .. 9 ] characters YYYY or YYYY-YYYY
Example: season=2021-2022
The season of the league

Request:

```python
import http.client

conn = http.client.HTTPSConnection("v1.basketball.api-sports.io")

headers = {
    'x-rapidapi-host': "v1.basketball.api-sports.io",
    'x-rapidapi-key': "XxXxXxXxXxXxXxXxXxXxXxXx"
    }

conn.request("GET", "/standings/groups", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))
```

Response:

```json
{
  "get": "standings/groups",
  "parameters": {
    "league": "12",
    "season": "2019-2020"
  },
  "errors": [],
  "results": 8,
  "response": [
    "Western Conference",
    "Eastern Conference",
    "Atlantic",
    "Southeast",
    "Central",
    "Northwest",
    "Pacific",
    "Southwest"
  ]
}
```

### Games

games
For all requests to games you can add the query parameter timezone to your request in order to retrieve the list of games in the time zone of your choice like “Europe/London“

To know the list of available time zones you have to use the endpoint timezone

Available status

NS : Not Started
Q1 : Quarter 1 (In Play)
Q2 : Quarter 2 (In Play)
Q3 : Quarter 3 (In Play)
Q4 : Quarter 4 (In Play)
OT : Over Time (In Play)
BT : Break Time (In Play)
HT : Halftime (In Play)
FT : Game Finished (Game Finished)
AOT : After Over Time (Game Finished)
POST : Game Postponed
CANC : Game Cancelled
SUSP : Game Suspended
AWD : Game Awarded
ABD : Game Abandoned
Games are updated every 15 seconds

This endpoint requires at least one parameter.

query Parameters
id	
integer
The id of the game

date	
stringYYYY-MM-DD
Example: date=2019-11-23
A valid date

league	
integer
The id of the league

season	
string [ 4 .. 9 ] characters YYYY or YYYY-YYYY
Example: season=2021-2022
The season of the league

team	
integer
The id of the team

timezone	
string
Example: timezone=Europe/London
A valid timezone

Request:

```python
import http.client

conn = http.client.HTTPSConnection("v1.basketball.api-sports.io")

headers = {
    'x-rapidapi-host': "v1.basketball.api-sports.io",
    'x-rapidapi-key': "XxXxXxXxXxXxXxXxXxXxXxXx"
    }

conn.request("GET", "/games?date=2019-11-23", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))
```

Response:

```json
{
  "get": "games",
  "parameters": {
    "league": "12",
    "date": "2019-11-23",
    "team": "134",
    "timezone": "europe/london",
    "season": "2019-2020"
  },
  "errors": [],
  "results": 1,
  "response": [
    {
      "id": 1911,
      "date": "2019-11-23T00:30:00+00:00",
      "time": "00:30",
      "timestamp": 1574469000,
      "timezone": "europe/london",
      "stage": null,
      "week": null,
      "venue": null,
      "status": {
        "long": "Game Finished",
        "short": "FT",
        "timer": null
      },
      "league": {
        "id": 12,
        "name": "NBA",
        "type": "League",
        "season": "2019-2020",
        "logo": null
      },
      "country": {
        "id": 5,
        "name": "USA",
        "code": "US",
        "flag": "https://media.api-football.com/flags/us.svg"
      },
      "teams": {
        "home": {
          "id": 134,
          "name": "Brooklyn Nets",
          "logo": null
        },
        "away": {
          "id": 157,
          "name": "Sacramento Kings",
          "logo": null
        }
      },
      "scores": {
        "home": {
          "quarter_1": 26,
          "quarter_2": 30,
          "quarter_3": 30,
          "quarter_4": 30,
          "over_time": null,
          "total": 116
        },
        "away": {
          "quarter_1": 23,
          "quarter_2": 26,
          "quarter_3": 21,
          "quarter_4": 27,
          "over_time": null,
          "total": 97
        }
      }
    }
  ]
}
```

#### Teams Statistics
Get teams statistics from one or several games ids.

Statistics are updated every 30-120 seconds

This endpoint need at least one parameter.

query Parameters
id	
string
The id of the game

ids	
stringMaximum of 20 games ids
Value: "id-id-id"
One or more games ids

Request:

```python
import http.client

conn = http.client.HTTPSConnection("v1.basketball.api-sports.io")

headers = {
    'x-rapidapi-host': "v1.basketball.api-sports.io",
    'x-rapidapi-key': "XxXxXxXxXxXxXxXxXxXxXxXx"
    }

conn.request("GET", "/basketball/games/statistics/teams?id=391053", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))
```

Response:

```json
{
  "get": "games",
  "parameters": {
    "id": "391053"
  },
  "errors": [],
  "results": 2,
  "response": [
    {
      "game": {
        "id": 391053
      },
      "team": {
        "id": 813
      },
      "field_goals": {
        "total": 22,
        "attempts": 66,
        "percentage": 33
      },
      "threepoint_goals": {
        "total": 8,
        "attempts": 29,
        "percentage": 27
      },
      "freethrows_goals": {
        "total": 26,
        "attempts": 34,
        "percentage": 76
      },
      "rebounds": {
        "total": 38,
        "offence": 10,
        "defense": 28
      },
      "assists": 14,
      "steals": 11,
      "blocks": 2,
      "turnovers": 11,
      "personal_fouls": 23
    },
    {
      "game": {
        "id": 391053
      },
      "team": {
        "id": 2316
      },
      "field_goals": {
        "total": 30,
        "attempts": 70,
        "percentage": 44
      },
      "threepoint_goals": {
        "total": 8,
        "attempts": 22,
        "percentage": 36
      },
      "freethrows_goals": {
        "total": 14,
        "attempts": 21,
        "percentage": 66
      },
      "rebounds": {
        "total": 47,
        "offence": 10,
        "defense": 37
      },
      "assists": 18,
      "steals": 4,
      "blocks": 6,
      "turnovers": 17,
      "personal_fouls": 27
    }
  ]
}
```

#### Players Statistics

Get players statistics from one or several games ids.

Also possible to get all statistics from a player id and a season.

Statistics are updated every 30-120 seconds

This endpoint need at least one parameter.

query Parameters
id	
string
The id of the game

ids	
stringMaximum of 20 games ids
Value: "id-id-id"
One or more games ids

player	
integer
The id of the player

season	
string
A valid season

Request:

```python
import http.client

conn = http.client.HTTPSConnection("v1.basketball.api-sports.io")

headers = {
    'x-rapidapi-host': "v1.basketball.api-sports.io",
    'x-rapidapi-key': "XxXxXxXxXxXxXxXxXxXxXxXx"
    }

conn.request("GET", "/basketball/games/statistics/players?id=391053", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))
```

Response:

```json
{
  "get": "games",
  "parameters": {
    "id": "391053"
  },
  "errors": [],
  "results": 18,
  "response": [
    {
      "game": {
        "id": 391053
      },
      "team": {
        "id": 813
      },
      "player": {
        "id": 4235,
        "name": "Simonis Zygimantas"
      },
      "type": "starters",
      "minutes": "27:35",
      "field_goals": {
        "total": 0,
        "attempts": 6,
        "percentage": null
      },
      "threepoint_goals": {
        "total": 0,
        "attempts": 2,
        "percentage": null
      },
      "freethrows_goals": {
        "total": 0,
        "attempts": 0,
        "percentage": null
      },
      "rebounds": {
        "total": 5
      },
      "assists": 1,
      "points": 0
    },
    {
      "game": {
        "id": 391053
      },
      "team": {
        "id": 813
      },
      "player": {
        "id": 4237,
        "name": "Beliavicius Paulius"
      },
      "type": "starters",
      "minutes": "32:53",
      "field_goals": {
        "total": 0,
        "attempts": 1,
        "percentage": null
      },
      "threepoint_goals": {
        "total": 4,
        "attempts": 10,
        "percentage": null
      },
      "freethrows_goals": {
        "total": 4,
        "attempts": 4,
        "percentage": null
      },
      "rebounds": {
        "total": 4
      },
      "assists": 1,
      "points": 16
    },
    {
      "game": {
        "id": 391053
      },
      "team": {
        "id": 813
      },
      "player": {
        "id": 4239,
        "name": "Sulskis Vytautas"
      },
      "type": "starters",
      "minutes": "34:04",
      "field_goals": {
        "total": 4,
        "attempts": 9,
        "percentage": null
      },
      "threepoint_goals": {
        "total": 0,
        "attempts": 0,
        "percentage": null
      },
      "freethrows_goals": {
        "total": 6,
        "attempts": 7,
        "percentage": null
      },
      "rebounds": {
        "total": 5
      },
      "assists": 1,
      "points": 14
    },
    {
      "game": {
        "id": 391053
      },
      "team": {
        "id": 813
      },
      "player": {
        "id": 4232,
        "name": "Domarkas Dominykas"
      },
      "type": "starters",
      "minutes": "34:12",
      "field_goals": {
        "total": 0,
        "attempts": 1,
        "percentage": null
      },
      "threepoint_goals": {
        "total": 2,
        "attempts": 6,
        "percentage": null
      },
      "freethrows_goals": {
        "total": 3,
        "attempts": 4,
        "percentage": null
      },
      "rebounds": {
        "total": 6
      },
      "assists": 6,
      "points": 9
    },
    {
      "game": {
        "id": 391053
      },
      "team": {
        "id": 813
      },
      "player": {
        "id": 4230,
        "name": "Dimsa Egidijus"
      },
      "type": "starters",
      "minutes": "24:57",
      "field_goals": {
        "total": 4,
        "attempts": 7,
        "percentage": null
      },
      "threepoint_goals": {
        "total": 0,
        "attempts": 0,
        "percentage": null
      },
      "freethrows_goals": {
        "total": 2,
        "attempts": 7,
        "percentage": null
      },
      "rebounds": {
        "total": 5
      },
      "assists": 4,
      "points": 10
    },
    {
      "game": {
        "id": 391053
      },
      "team": {
        "id": 813
      },
      "player": {
        "id": 4233,
        "name": "Kliucinykas Tautvydas"
      },
      "type": "bench",
      "minutes": "22:19",
      "field_goals": {
        "total": 1,
        "attempts": 5,
        "percentage": null
      },
      "threepoint_goals": {
        "total": 2,
        "attempts": 7,
        "percentage": null
      },
      "freethrows_goals": {
        "total": 4,
        "attempts": 4,
        "percentage": null
      },
      "rebounds": {
        "total": 5
      },
      "assists": 1,
      "points": 12
    },
    {
      "game": {
        "id": 391053
      },
      "team": {
        "id": 813
      },
      "player": {
        "id": 4238,
        "name": "Nausedas Justas"
      },
      "type": "bench",
      "minutes": "12:39",
      "field_goals": {
        "total": 0,
        "attempts": 0,
        "percentage": null
      },
      "threepoint_goals": {
        "total": 0,
        "attempts": 3,
        "percentage": null
      },
      "freethrows_goals": {
        "total": 3,
        "attempts": 4,
        "percentage": null
      },
      "rebounds": {
        "total": 0
      },
      "assists": 0,
      "points": 3
    },
    {
      "game": {
        "id": 391053
      },
      "team": {
        "id": 813
      },
      "player": {
        "id": 4236,
        "name": "Vilys Domantas"
      },
      "type": "bench",
      "minutes": "9:17",
      "field_goals": {
        "total": 2,
        "attempts": 3,
        "percentage": null
      },
      "threepoint_goals": {
        "total": 0,
        "attempts": 0,
        "percentage": null
      },
      "freethrows_goals": {
        "total": 2,
        "attempts": 2,
        "percentage": null
      },
      "rebounds": {
        "total": 0
      },
      "assists": 0,
      "points": 6
    },
    {
      "game": {
        "id": 391053
      },
      "team": {
        "id": 813
      },
      "player": {
        "id": 4240,
        "name": "Udras Antanas"
      },
      "type": "bench",
      "minutes": "9:05",
      "field_goals": {
        "total": 0,
        "attempts": 2,
        "percentage": null
      },
      "threepoint_goals": {
        "total": 0,
        "attempts": 1,
        "percentage": null
      },
      "freethrows_goals": {
        "total": 2,
        "attempts": 2,
        "percentage": null
      },
      "rebounds": {
        "total": 1
      },
      "assists": 0,
      "points": 2
    },
    {
      "game": {
        "id": 391053
      },
      "team": {
        "id": 813
      },
      "player": {
        "id": 4229,
        "name": "Bergaudas Giedrius"
      },
      "type": "bench",
      "minutes": "17:59",
      "field_goals": {
        "total": 3,
        "attempts": 3,
        "percentage": null
      },
      "threepoint_goals": {
        "total": 0,
        "attempts": 0,
        "percentage": null
      },
      "freethrows_goals": {
        "total": 0,
        "attempts": 0,
        "percentage": null
      },
      "rebounds": {
        "total": 3
      },
      "assists": 0,
      "points": 6
    },
    {
      "game": {
        "id": 391053
      },
      "team": {
        "id": 2316
      },
      "player": {
        "id": 7634,
        "name": "Stankevicius Rokas"
      },
      "type": "starters",
      "minutes": "36:34",
      "field_goals": {
        "total": 5,
        "attempts": 11,
        "percentage": null
      },
      "threepoint_goals": {
        "total": 1,
        "attempts": 4,
        "percentage": null
      },
      "freethrows_goals": {
        "total": 2,
        "attempts": 4,
        "percentage": null
      },
      "rebounds": {
        "total": 10
      },
      "assists": 2,
      "points": 15
    },
    {
      "game": {
        "id": 391053
      },
      "team": {
        "id": 2316
      },
      "player": {
        "id": 7633,
        "name": "Labutis Ignas"
      },
      "type": "starters",
      "minutes": "37:08",
      "field_goals": {
        "total": 1,
        "attempts": 2,
        "percentage": null
      },
      "threepoint_goals": {
        "total": 2,
        "attempts": 4,
        "percentage": null
      },
      "freethrows_goals": {
        "total": 0,
        "attempts": 0,
        "percentage": null
      },
      "rebounds": {
        "total": 6
      },
      "assists": 1,
      "points": 8
    },
    {
      "game": {
        "id": 391053
      },
      "team": {
        "id": 2316
      },
      "player": {
        "id": 21495,
        "name": "J. Nurse"
      },
      "type": "starters",
      "minutes": "23:31",
      "field_goals": {
        "total": 6,
        "attempts": 10,
        "percentage": null
      },
      "threepoint_goals": {
        "total": 0,
        "attempts": 0,
        "percentage": null
      },
      "freethrows_goals": {
        "total": 0,
        "attempts": 1,
        "percentage": null
      },
      "rebounds": {
        "total": 11
      },
      "assists": 1,
      "points": 12
    },
    {
      "game": {
        "id": 391053
      },
      "team": {
        "id": 2316
      },
      "player": {
        "id": 12049,
        "name": "K. Anderson"
      },
      "type": "starters",
      "minutes": "22:34",
      "field_goals": {
        "total": 3,
        "attempts": 8,
        "percentage": null
      },
      "threepoint_goals": {
        "total": 1,
        "attempts": 2,
        "percentage": null
      },
      "freethrows_goals": {
        "total": 0,
        "attempts": 0,
        "percentage": null
      },
      "rebounds": {
        "total": 3
      },
      "assists": 4,
      "points": 9
    },
    {
      "game": {
        "id": 391053
      },
      "team": {
        "id": 2316
      },
      "player": {
        "id": 7630,
        "name": "Zaunieriunas Modestas"
      },
      "type": "starters",
      "minutes": "33:12",
      "field_goals": {
        "total": 1,
        "attempts": 3,
        "percentage": null
      },
      "threepoint_goals": {
        "total": 2,
        "attempts": 5,
        "percentage": null
      },
      "freethrows_goals": {
        "total": 7,
        "attempts": 7,
        "percentage": null
      },
      "rebounds": {
        "total": 0
      },
      "assists": 5,
      "points": 15
    },
    {
      "game": {
        "id": 391053
      },
      "team": {
        "id": 2316
      },
      "player": {
        "id": 7626,
        "name": "Daunys Edvinas"
      },
      "type": "bench",
      "minutes": "17:38",
      "field_goals": {
        "total": 3,
        "attempts": 4,
        "percentage": null
      },
      "threepoint_goals": {
        "total": 0,
        "attempts": 0,
        "percentage": null
      },
      "freethrows_goals": {
        "total": 2,
        "attempts": 3,
        "percentage": null
      },
      "rebounds": {
        "total": 2
      },
      "assists": 0,
      "points": 8
    },
    {
      "game": {
        "id": 391053
      },
      "team": {
        "id": 2316
      },
      "player": {
        "id": 7632,
        "name": "Bancevicius Armandas"
      },
      "type": "bench",
      "minutes": "29:22",
      "field_goals": {
        "total": 2,
        "attempts": 4,
        "percentage": null
      },
      "threepoint_goals": {
        "total": 2,
        "attempts": 5,
        "percentage": null
      },
      "freethrows_goals": {
        "total": 1,
        "attempts": 4,
        "percentage": null
      },
      "rebounds": {
        "total": 5
      },
      "assists": 1,
      "points": 11
    },
    {
      "game": {
        "id": 391053
      },
      "team": {
        "id": 2316
      },
      "player": {
        "id": 7628,
        "name": "Pazarauskas Titas"
      },
      "type": "bench",
      "minutes": "25:00",
      "field_goals": {
        "total": 2,
        "attempts": 6,
        "percentage": null
      },
      "threepoint_goals": {
        "total": 0,
        "attempts": 2,
        "percentage": null
      },
      "freethrows_goals": {
        "total": 2,
        "attempts": 2,
        "percentage": null
      },
      "rebounds": {
        "total": 4
      },
      "assists": 4,
      "points": 6
    }
  ]
}
```

#### Head to Head (H2H)
Get heads to heads between two teams.

query Parameters
h2h
required
stringid-id
Example: h2h=132-134
The ids of the teams

date	
stringYYYY-MM-DD
Example: date=2019-12-05
A valid date

league	
integer
The id of the league

season	
string [ 4 .. 9 ] characters YYYY or YYYY-YYYY
Example: season=2021-2022
The season of the league

timezone	
string
Example: timezone=Europe/London
A valid timezone

Request:

```python
import http.client

conn = http.client.HTTPSConnection("v1.basketball.api-sports.io")

headers = {
    'x-rapidapi-host': "v1.basketball.api-sports.io",
    'x-rapidapi-key': "XxXxXxXxXxXxXxXxXxXxXxXx"
    }

conn.request("GET", "/games?h2h=132-134", headers=headers)

res = conn.getresponse()
data = res.read()

print(data.decode("utf-8"))
```

Response:

```json
{
  "get": "games",
  "parameters": {
    "league": "12",
    "h2h": "132-134",
    "season": "2019-2020"
  },
  "errors": [],
  "results": 4,
  "response": [
    {
      "id": 2003,
      "date": "2019-12-05T00:30:00+00:00",
      "time": "00:30",
      "timestamp": 1575505800,
      "timezone": "UTC",
      "stage": null,
      "week": null,
      "venue": null,
      "status": {
        "long": "Not Started",
        "short": "NS",
        "timer": null
      },
      "league": {
        "id": 12,
        "name": "NBA",
        "type": "League",
        "season": "2019-2020",
        "logo": null
      },
      "country": {
        "id": 5,
        "name": "USA",
        "code": "US",
        "flag": "https://media.api-football.com/flags/us.svg"
      },
      "teams": {
        "home": {
          "id": 132,
          "name": "Atlanta Hawks",
          "logo": null
        },
        "away": {
          "id": 134,
          "name": "Brooklyn Nets",
          "logo": null
        }
      },
      "scores": {
        "home": {
          "quarter_1": null,
          "quarter_2": null,
          "quarter_3": null,
          "quarter_4": null,
          "over_time": null,
          "total": null
        },
        "away": {
          "quarter_1": null,
          "quarter_2": null,
          "quarter_3": null,
          "quarter_4": null,
          "over_time": null,
          "total": null
        }
      }
    }
  ]
}
```


