---
description: This is a comprehensive documentation for working with different Goalserve basketball feeds. Use this documentation whenever you're working with Goalserve
globs: 
---
# Goalserve doc summary for basketball feeds

## Essential Goalserve Data Feeds 
Tournament Schedule - For upcoming games
Team Season Stats - For team performance
Team Player Injuries - Critical for betting
Pregame Odds Comparison - Core betting data
Head-to-Head Comparison - Historical context
League Standings - For team ranking context 
Live Scores - For in-game betting 

## the api key is included in the url but also in the env as GOALSERVE_API_KEY if you want to append it to the url to make it more secure

### this doc only contains the feeds that we said our essential for our deep research workflow

IMPORTANT: for JSON output please add "?json=1" to the feed URL

You are absolutely right. I apologize for the repeated error! Let's focus on the first four feeds, providing detailed and comprehensive rulesets. We'll address the remaining three feeds immediately afterwards.

**General Notes for AI Coder (Applicable to Feeds 1-4):**

*   **Error Handling:** Implement robust error handling for each feed. This includes handling network errors, invalid data formats, missing fields, and unexpected values. Log errors with detailed context for debugging.
*   **Data Validation:** Validate all data received from the feeds against expected data types, ranges, and patterns. Discard or flag invalid data.
*   **Rate Limiting:** Respect any rate limits imposed by the API. Implement appropriate delays and retry mechanisms if rate limits are exceeded.
*   **Time Zones:** Explicitly handle time zone conversions. Store all dates and times in UTC for consistency.
*   **XML Parsing:** Use a robust XML parsing library that can handle malformed XML and large documents efficiently. Consider streaming XML parsing for very large feeds to minimize memory usage.
*   **Consistent Data Storage:** Strive for consistent naming conventions and data types when storing parsed data from different feeds. This will simplify data aggregation and analysis.

***

### 1. Tournament Schedule Feed - Comprehensive Ruleset

*   **Description:** Provides the schedule and results of games for a given tournament/league. Useful for displaying upcoming games, historical results, and creating a game calendar.
*   **URL Format:**
    *   `https://www.goalserve.com/getfeed/---------/bsktbl/{league}-shedule`
    *   Replace `---------` with your API key.
    *   Replace `{league}` with `nba`, `ncaa`, `wnba`, or `wncaa` for the respective league.
*   **Data Format:** XML (convertible to JSON by appending `?json=1`). Choose one format (XML or JSON) and use it consistently throughout your application.
*   **Time Zone:** EST/EDT. All `date`, `time`, and `formatted_date` attributes are in Eastern Time.
*   **Refresh Period:** 2 hours. However, the Live Game Scores feed should be used for near real-time updates on game status and scores.
*   **Root Element:** `<matches>` (contains attributes related to the schedule).
    *   Attributes:
        *   `date` (string): The overall date for the set of matches listed below, format example: `"Oct 06, 2024"`. Can be used for filtering results or grouping them in your application.
        *   `timezone` (string): The timezone applicable to the `date` and `time` attributes of the contained `<match>` elements. This will be either `"EST"` or `"EDT"`. Use this to properly convert the provided time into a consistent, standardized timezone (UTC is recommended).
        *   `seasonType` (string): Indicates the type of season the matches belong to. Possible values: `"Pre Season"`, `"Regular season"`, `"Postseason"`.
        *   `formatted_date` (string): The date formatted as `"06.10.2024"`. This is redundant but available if needed for localized date display.
*   **Child Element: `<match>` (Represents a single game)**
    *   Attributes:
        *   `date` (string): Match start date in string format, e.g., `"Oct 06, 2024"`. Redundant information, as this is already present in the parent `<matches>` element. If differing values arise, prioritize the value in `<match>`.
        *   `timezone` (string): The timezone of the match, e.g. `"EDT"`. Redundant, as this is already present in the parent `<matches>` element. If differing values arise, prioritize the value in `<match>`.
        *   `status` (string): Match status. Possible values: `"Not Started"`, `"Postponed"`, `"Cancelled"`, `"Final"`.
        *   `time` (string): Match start time, e.g., `"10:00 AM"`. Combine this with the `date` and `timezone` to create a complete timestamp.
        *   `venue_name` (string): Name of the venue, e.g., `"Etihad Arena, Abu Dhabi,"`. Note the potential for trailing commas or inconsistencies in naming.
        *   `venue_id` (string): Unique identifier for the venue, e.g., `"1618"`.
        *   `attendance` (string): Match attendance. Only populated *after* the game ends. Expect this to be empty/null before the game concludes. Example: `"11527"`.
        *   `formatted_date` (string): Match start date in `dd.MM.yyyy` format (e.g., `"06.10.2024"`). Redundant; use if needed for localized date display.
        *   `datetime_utc` (string): Match start date and time in UTC format (e.g., `"06.10.2024 14:00"`). This is the *most reliable* timestamp for scheduling and consistency. Parse this into a `datetime` object.
        *   `id` (string): Unique identifier for the match, e.g., `"292278"`. Crucial for linking to other feeds (like Live Game Scores).
        *   **Example**: `<match date="Oct 06, 2024" timezone="EDT" status="Final" time="10:00 AM" timer="" venue_name="Etihad Arena, Abu Dhabi," venue_id="1618" attendance="11527" formatted_date="06.10.2024 14:00" id="292278">`
*   **Child Elements of `<match>`: `<hometeam>` and `<awayteam>` (Represent the two teams in the match)**
    *   Attributes:
        *   `name` (string): Team name, e.g., `"Boston Celtics"`.
        *   `possession` (string): Likely deprecated in this feed. See Live Game Scores for real-time possession. Should not depend on this value in schedule feeds.
        *   `q1`, `q2`, `q3`, `q4` (string): Score for each quarter (can be empty before the game starts), e.g., `"34"`.
        *   `ot` (string): Overtime score (empty if no overtime), e.g., `""`. If there are multiple overtimes, this value is the *sum* of all overtime scores.
        *   `totalscore` (string): Total game score, e.g., `"130"`.
        *   `id` (string): Team ID, e.g., `"1067"`. Use this to link to Team Rosters and Team Season Stats feeds.
        *   **Example:** `<hometeam name="Boston Celtics" posession="False" q1="34" q2="33" q3="42" q4="21" ot="" totalscore="130" id="1067" />`
*   **Rules and Considerations:**
    *   **Time Handling:** Use `datetime_utc` for reliable scheduling. Convert to your application's preferred timezone as needed, but *store* it in UTC. If `datetime_utc` is missing or invalid, construct it from `date`, `time`, and `timezone`, applying the proper EST/EDT offset.
    *   **League Handling:** Abstract the league (`nba`, `ncaa`, `wnba`, `wncaa`) to allow easy switching and iteration. Create a configuration or mapping for league-specific behavior.
    *   **Status Updates:** Don't rely solely on this feed for real-time status. Use the Live Game Scores feed to track games in progress. This feed is primarily for *initial* scheduling and historical results.
    *   **Team IDs:** Store team IDs persistently. They are used in other feeds for linking data.
    *   **Data Integrity:** Always validate data types. Scores should be integers, IDs should be strings or integers (consistent across your application), and dates should be valid date/time objects.
    *   **Error Handling:** If a `match` element is missing required attributes, log an error and attempt to recover (e.g., use defaults or skip the element).
    *   **Clear Separation:** The logic for parsing and storing this data should be clearly separated from the logic for other feeds. This will improve maintainability and reduce the risk of errors.
    *   **Modularity:** Design the code to be modular, so that changes to one part of the feed (e.g., a new status value) don't require extensive modifications to the entire parsing process.

***

### 2. League Standings Feed - Comprehensive Ruleset

*   **Description:** Provides current league standings and a list of participating teams. Useful for displaying rankings, identifying team performance, and providing context to betting odds.
*   **URL Format:**
    *   Division Standings: `https://www.goalserve.com/getfeed/---------/bsktbl/{league}-standings`
    *   Conference Standings (NBA Only): `https://www.goalserve.com/getfeed/---------/bsktbl/nba-standings-conf`
    *   Replace `---------` with your API key.
    *   Replace `{league}` with `nba`, `ncaa`, or `wnba` for division standings. The conference standings are only available for `nba`
*   **Data Format:** XML (convertible to JSON with `?json=1`). Choose and be consistent.
*   **Time Zone:** Not explicitly time-zoned. Data reflects current standings without specific time context.
*   **Refresh Period:** 1 hour.
*   **Data Structure and Elements:** The structure of the feed depends on whether you are requesting division or conference standings:
    *   **Division Standings:** Contains two nested elements `<league name="[Conference Name]">` which contains `<division name="[Division Name]">` which contains `<team>` elements
    *   **Conference Standings:** Only contains `<league name="[Conference Name]">` which contains `<team>` elements
*   **Team Element `<team>`:** Represents a team's standing within the league, division, or conference.
    *   Attributes:
        *   `position` (string): Team's rank (e.g., `"1"` for first place).
        *   `name` (string): Team name (e.g., `"Boston Celtics"`). Match this against team names from other feeds for consistency.
        *   `won` (string): Number of games won (e.g., `"32"`).
        *   `lost` (string): Number of games lost (e.g., `"15"`).
        *   `gb` (string): Games back from the leading team. The leader will have a value of `"-"`. Example: `"-"`, `"5.5"`
        *   `percentage` (string): Winning percentage (e.g., `".681"`). Handle as a decimal.
        *   `home_record` (string): Home win-loss record (e.g., `"15-9"`). Parse into separate wins and losses.
        *   `road_record` (string): Away win-loss record (e.g., `"17-6"`). Parse into separate wins and losses.
        *   `average_points_for` (string): Average points scored *by* the team (e.g., `"117.2"`).
        *   `average_points_agains` (string): Average points scored *against* the team (e.g., `"108.5"`).
        *   `difference` (string): Point differential (average_points_for - average_points_agains) (e.g., `"+8.7"`). Note the `"+"` sign, which must be handled when parsing.
        *   `streak` (string): Current win/loss streak (e.g., `"L1"` for one loss, `"W3"` for three wins`). The character indicates win/loss, and the number indicates the length of the streak.
        *   `last_10` (string): Win-loss record in the last 10 games (e.g., `"5-5"`). Parse into separate wins and losses.
        *   `id` (string): Team ID (e.g., `"1067"`). Use this to link to other feeds.
*   **Rules and Considerations:**
    *   **League/Conference/Division Handling:** Implement logic to differentiate between division and conference standings. The element hierarchy will differ, so you'll need conditional parsing logic.
    *   **Data Type Conversion:** Convert numeric attributes (position, won, lost, percentage, points, difference) to appropriate numeric types (integer, float).
    *   **Record Parsing:** Create helper functions to parse `home_record`, `road_record`, and `last_10` into separate win and loss counts. These functions should handle potential formatting issues.
    *   **String Handling:** Trim any leading or trailing whitespace from team names to ensure consistent matching.
    *   **Missing Data:** Handle cases where certain attributes might be missing or empty. Provide default values or log errors as needed.
    *   **Team ID Consistency:** The Team IDs in this feed *must* match the Team IDs in other Goalserve feeds. Enforce this consistency in your data model.
    *   **Game Back Logic:** Implement robust logic to handle game back values, especially for the league leader `"-"`. Convert `"-"` to a suitable numeric representation (e.g., `0` or `null`).
    *   **Error Handling:** If a `<team>` element is missing required attributes, log an error and attempt to recover (e.g., use defaults or skip the element).
*   **Example Data Snippet (Division Standings):**

```xml
    <league name="Eastern Conference">
        <division name="Atlantic">
            <team position="1" name="Boston Celtics" won="32" lost="15" gb="-" percentage=".681" home_record="15-9" road_record="17-6" average_points_for="117.2" average_points_agains="108.5" difference="+8.7" streak="L1" last_10="5-5" id="1067" />
        </division>
    </league>
```

*   **Example Data Snippet (Conference Standings):**

```xml
   <league name="Eastern Conference">
        <team position="1" name="Boston Celtics" won="32" lost="15" gb="-" percentage=".681" home_record="15-9" road_record="17-6" average_points_for="117.2" average_points_agains="108.5" difference="+8.7" streak="L1" last_10="5-5" id="1067" />
   </league>
```

***

### 3. Team Season Stats Feed - Comprehensive Ruleset

*   **Description:** Provides accumulated player and team statistics for the current season. Useful for generating player profiles, team performance analyses, and creating data-driven betting insights. Limited to NBA data only.
*   **URL Format:**
    *   Player stats: `https://www.goalserve.com/getfeed/---------/bsktbl/{teamID}_stats`
    *   Team stats: `https://www.goalserve.com/getfeed/---------/bsktbl/{teamID}_team_stats`
    *   Replace `---------` with your API key.
    *   Replace `{teamID}` with the appropriate Team ID.
*   **Data Format:** XML (convertible to JSON with `?json=1`). Choose one and maintain consistency.
*   **Time Zone:** Not explicitly time-zoned. Data represents season-to-date statistics.
*   **Refresh Period:** 1 hour.
*   **Root Element:** `<statistic>`
    *   Attributes:
        *   `team` (string): Team name (e.g., `"Los Angeles Lakers"`).
        *   `season` (string): Season value (e.g., `"2024/2025"`).
        *   `id` (string): Team ID (e.g., `"1066"`). Use this to link to other feeds.
*   **Child Element: `<category>`:** Groups statistics into categories (e.g., `"Game"`, `"Shooting"`, `"Offensive"`, `"Defensive"`).
    *   Attributes:
        *   `name` (string): The statistic category. The attributes within subsequent elements will depend on the `category` value.
            *   *Player Stats (`_stats` feed):*
                *   `"Game"`: Contains general game statistics.
                *   `"Shooting"`: Contains shooting percentages and attempts.
            *   *Team Stats (`_team_stats` feed):*
                *   `"General"`: Contains generic team statistics.
                *   `"Offensive"`: Contains offensive team statistics.
                *   `"Defensive"`: Contains defensive team statistics.
*   **Grandchild Elements:** These elements contain the actual statistical data, but their structure *depends entirely* on the parent `<category>` element:
    *   For *Player Stats (`_stats` feed)*: `<player>` elements are used.
    *   For *Team Stats (`_team_stats` feed)*: `<team>` and `<opponents>` elements are used.
*   **General Rules and Considerations (Applicable to both Player and Team Stats):**
    *   **Feed Selection:** Choose the correct feed URL (`_stats` for player stats, `_team_stats` for team stats) based on your application's needs. Do not attempt to parse both with the same logic.
    *   **NBA Only:** This feed is *only* available for NBA data. Do not attempt to use it with NCAA or WNBA data.
    *   **Dynamic Attributes:** The set of attributes within the `<player>` or `<team>`/`<opponents>` elements change significantly based on the `<category name>`. Code must handle this dynamically.
    *   **Data Type Conversion:** Convert all numeric attributes to appropriate numeric types (integer, float, decimal).
    *   **Missing Data:** Expect some attributes to be missing or empty. Handle these cases gracefully by providing default values (e.g., `0`, `null`) or logging errors.
    *   **Data Integrity:** Ensure that player and team names and IDs are consistent with other feeds (e.g., Team Rosters, Live Game Scores). Create a data validation layer to enforce this.
    *   **Units:** Be aware of the units used for each statistic (e.g., average values are "per game," percentages are decimals). Store the data with clear unit labels.

*   **Player Stats - Additional Rules and Considerations:**
    *   **`<player>` element attributes breakdown:**
        *   *If `<category name="Game">`:* (General Player Stats)
            *   `rank` (string): Player ranking within the team.
            *   `name` (string): Player name.
            *   `games_played` (string): Number of games played.
            *   `games_started` (string): Number of games started.
            *   `minutes` (string): Average minutes per game.
            *   `points_per_game` (string): Average points per game.
            *   `offensive_rebounds_per_game` (string): Average offensive rebounds per game.
            *   `defensive_rebounds_per_game` (string): Average defensive rebounds per game.
            *   `rebounds_per_game` (string): Average total rebounds per game.
            *   `assists_per_game` (string): Average assists per game.
            *   `steals_per_game` (string): Average steals per game.
            *   `blocks_per_game` (string): Average blocks per game.
            *   `turnovers_per_game` (string): Average turnovers per game.
            *   `fouls_per_game` (string): Average fouls per game.
            *   `efficiency_rating` (string): Player efficiency rating. (Can be empty).
            *   `id` (string): Player ID.
        *   *If `<category name="Shooting">`:* (Player Shooting Stats)
            *   `rank` (string): Player ranking within the team.
            *   `name` (string): Player name.
            *   `fg_made_per_game` (string): Average field goals made per game.
            *   `fg_attempts_per_game` (string): Average field goal attempts per game.
            *   `fg_pct` (string): Field goal percentage.
            *   `three_point_made_per_game` (string): Average 3-point field goals made per game.
            *   `three_point_attempts_per_game` (string): Average 3-point field goal attempts per game.
            *   `three_point_pct` (string): 3-point field goal percentage.
            *   `free_throws_made_per_game` (string): Average free throws made per game.
            *   `free_throws_attempts_per_game` (string): Average free throw attempts per game.
            *   `free_throws_pct` (string): Free throw percentage.
            *   `two_point_made_per_game` (string): Average 2-point field goals made per game.
            *   `two_point_attemps_per_game` (string): Average 2-point field goal attempts per game.
            *   `two_point_pct` (string): 2-point field goal percentage.
            *   `points_per_shot` (string): Average points scored per shot.
            *   `field_goal_pct_avg` (string): Seems deprecated. Use `fg_pct` instead.
            *   `id` (string): Player ID.
*   **Team Stats - Additional Rules and Considerations:**
    *   The stats for the teams will be nested based on the category as well and they will be related to the team or to the opponent.
    *   If `<category name="General">`

                *   `games_played` (string): Games played in current season (ONLY regular season)
                *   `total_rebounds` (string): Total rebounds made by team
                *   `rebounds_avg` (string): Rebounds per match
                *   `technical_fouls_total` (string): total number of ONLY technical fouls made
                *   `fouls_total` (string): total number of all foulds made
                *   `fouls_avg` (string): Average foulds per game

                *   `defensive_rebounds_total` (string): total defensive rebounds made in all games
                *   `defensive_rebounds_avg` (string): average defensive rebounds made per game
                *   `steals_total` (string): total steals made in all games
                *   `steals_avg` (string): average steals per game
                *   `blocks_total` (string): total blocks made in all games
                *   `blocks_avg` (string): average blocks per game
        *   If `<category name="Offensive">`

                *   `points_avg` (string): average points per game scored
                *   `fieldgoals_avg` (string): average field goals scored per game (2pt + 3pt)
                *   `fieldgoals_attempts_avg` (string): average field goals attempts per game
                *   `fieldgoals_pct` (string): field goals scoring percentage per game
                *   `threepoint_avg` (string): average 3pt scored per game
                *   `threepoint_attempts_avg` (string): average 3pt attempts per game
                *   `threepoint_pct` (string): 3pt scoring percentage per game
                *   `freethrows_avg` (string): average free throws scored per game
                *   `freethroews_attempts_avg` (string): average free throes attempts per game
                *   `freethrows_pct` (string): free throws scoring percentage per game
                *   `assists_avg` (string): average assits per game
                *   `offensive_rebounds_avg` (string): average offensive rebounds made per game
                *   `points_total` (string): total points scored in all games
        *   If `<category name="Defensive">`

                *   `defensive_rebounds_total` (string): total defensive rebounds made in all games
                *   `defensive_rebounds_avg` (string): average defensive rebounds made per game
                *   `steals_total` (string): total steals made in all games
                *   `steals_avg` (string): average steals per game
                *   `blocks_total` (string): total blocks made in all games
                *   `blocks_avg` (string): average blocks per game
*   **Example Data Snippet (Player Stats - Game):**

```xml
<statistic team="Los Angeles Lakers" season="2024/2025" id="1066">
    <category name="Game">
        <player rank="1" name="Anthony Davis" games_played="42" games_started="42" minutes="34.3" points_per_game="25.7" offensive_rebounds_per_game="2.8" defensive_rebounds_per_game="9.0" rebounds_per_game="11.9" assists_per_game="3.4" steals_per_game="1.3" blocks_per_game="2.1" turnovers_per_game="2.2" fouls_per_game="2.0" efficiency_rating="" id="6583" />
    </category>
</statistic>
```

*   **Example Data Snippet (Team Stats - General):**

```xml
<statistic team="Los Angeles Lakers" season="2024/2025" id="1066">
    <category name="General">
        <team games_played="50" total_rebounds="2091" rebounds_avg="41.8" technical_fouls_total="34" fouls_total="825" fouls_avg="16.5" />
        <opponents defensive_rebounds_total="1599" defensive_rebounds_avg="32.0" steals_total="397" steals_avg="7.9" blocks_total="206" blocks_avg="4.1" />
    </category>
</statistic>
```

*   **Code Structure Recommendation:**
    *   Create separate classes or functions to handle the parsing of each `<category>` of statistics. This will improve code organization and readability.
    *   Use a data structure (e.g., a dictionary or map) to map the `<category name>` to the appropriate parsing function. This will allow you to dynamically select the correct parsing logic based on the category.

***

### 4. Team Player Injuries Reports Feed - Comprehensive Ruleset

*   **Description:** Provides information on injured or suspended players for a specific team. Essential for tracking player availability and its impact on betting odds.
*   **URL Format:**
    *   `https://www.goalserve.com/getfeed/---------/bsktbl/{teamID}_injuries`
    *   Replace `---------` with your API key.
    *   Replace `{teamID}` with the Team ID.
*   **Data Format:** XML (convertible to JSON with `?json=1`). Choose consistently.
*   **Time Zone:** Not explicitly time-zoned, but the `date` attribute likely refers to Eastern Time.
*   **Refresh Period:** 1 hour.
*   **Root Element:** `<team>`
    *   Attributes:
        *   `name` (string): Team name (e.g., `"Los Angeles Lakers"`).
        *   `id` (string): Team ID (e.g., `"1066"`). Use this to link to other feeds.
*   **Child Element: `<report>`:** Contains information about a single injured/suspended player.
    *   Attributes:
        *   `date` (string): Date when the player was sidelined (dd.MM.yyyy), e.g., `"11.01.2024"`.
        *   `player_name` (string): Player name (e.g., `"Jalen Hood-Schifino"`).
        *   `player_id` (string): Player ID (can be empty), e.g., `""`.
        *   `status` (string): Suspension/injury status (e.g., `"Hamstring"`, `"Foot"`, `"Sidelined"`, `"Questionable"`, etc.). This value can be either a general status (Sidelined, Questionable) or the specific injury type.
        *   `description` (string): Additional description of the injury/suspension, including potential return dates (e.g., `"Game Time Decision"`).
*   **Rules and Considerations:**
    *   **Team ID is Essential:** The Team ID is *required* for this feed. Without a valid Team ID, you will not receive injury information.
    *   **Date Formatting:** The `date` attribute is in `dd.MM.yyyy` format. You must parse it accordingly. Use a date formatting library to ensure correct parsing.
    *   **Status Handling:** The `status` attribute requires careful parsing and interpretation.
        *   If the `status` is a general status like `"Sidelined"` or `"Out"`, the player is very likely to miss the next game.
        *   If the `status` is `"Questionable"`, the player's availability is uncertain.
        *   If the `status` is a specific injury type (e.g., `"Hamstring"`, `"Concussion"`), the player's availability is uncertain, and the specific injury type is provided.
    *   **Description Parsing:** The `description` attribute often provides valuable information, such as potential return dates or the severity of the injury. Attempt to extract this information using regular expressions or natural language processing techniques.
    *   **Player ID Absence:** The `player_id` attribute can be empty (`""`). If the `player_id` is missing, rely on the `player_name` for identification. However, be aware that player names are not always unique, so you may need to implement additional logic to disambiguate players.
    *   **Data Integrity:** Ensure that player names are consistent with player names in other Goalserve feeds (e.g., Team Roster feed).
    *   **Completeness:** The information in this feed may not be exhaustive. It is recommended to supplement it with information from other news sources to get a more comprehensive view of player injuries and availability.
    *   **Time Sensitivity:** Injury information is highly time-sensitive. Update your application's injury data frequently to reflect the latest reports.
*   **Example Data Snippet:**

```xml
<team name="Los Angeles Lakers" id="1066">
    <report date="11.01.2024" player_name="Jalen Hood-Schifino" player_id="" status="Hamstring" description="Game Time Decision"/>
</team>
```


**General Notes for AI Coder (Applicable to Feeds 5-7):**

*   **Error Handling:** Implement robust error handling for each feed. This includes handling network errors, invalid data formats, missing fields, and unexpected values. Log errors with detailed context for debugging.
*   **Data Validation:** Validate all data received from the feeds against expected data types, ranges, and patterns. Discard or flag invalid data.
*   **Rate Limiting:** Respect any rate limits imposed by the API. Implement appropriate delays and retry mechanisms if rate limits are exceeded.
*   **Time Zones:** Explicitly handle time zone conversions. Store all dates and times in UTC for consistency.
*   **XML Parsing:** Use a robust XML parsing library that can handle malformed XML and large documents efficiently. Consider streaming XML parsing for very large feeds to minimize memory usage.
*   **Consistent Data Storage:** Strive for consistent naming conventions and data types when storing parsed data from different feeds. This will simplify data aggregation and analysis.
*   **Incremental Updates:** Design your data storage and update mechanisms to handle incremental updates from these feeds efficiently. Avoid re-processing the entire dataset every time a feed is updated.

***

### 5. Pregame Odds Comparison Feed - Comprehensive Ruleset

*   **Description:** Provides a comparison of pre-game odds from various bookmakers. This is *critical* for odds shopping and identifying the best betting opportunities.
*   **URL Format:**
    *   `https://www.goalserve.com/getfeed/---------/bsktbl/{league}-shedule?showodds=1`
    *   Replace `---------` with your API key.
    *   Replace `{league}` with `nfl`, `fbs` (college), etc. (Check coverage feed for exact league codes).
    *   *Optional Parameters:*
        *   `date1=dd.MM.yyyy&date2=dd.MM.yyyy`: Filter by date range. *Always include `date2` even if filtering for a single day.*
        *   `bm=bookmakerID1,bookmakerID2,...`: Filter by bookmaker IDs (comma-separated).
        *   `market=marketID1,marketID2,...`: Filter by market IDs (comma-separated).
*   **Data Format:** XML (GZIP Compressed)
*   **Time Zone:** Match start time is in the feed's timezone (Eastern Time).
*   **Refresh Period:** Varies (approximately every 30 seconds, but depends on the bookmaker).
*   **Compression:** *Mandatory GZIP Decompression.* Your code *must* handle GZIP decompression correctly. Use a suitable library for this purpose.
*   **Root Element:** Implicit list of `<match>` elements. The XML document will contain multiple `<match>` elements without an enclosing root element.
*   `**<match>` Element:** Represents a single match with associated odds.
    *   Attributes:
        *   `time` (string): Match start time in the feed's timezone. Example: `"8:20 PM"`.
        *   `contestID` (string): Unique match identifier. Example: `"96839"`. This is the key to linking odds data with match data from other feeds.
        *   `formatted_date` (string): Match start date in dd.MM.yyyy format. Example: `"18.11.2021"`.
        *   `status` (string): Match status. Will be `"Not Started"`, `"Postponed"`, or `"Cancelled"`. *This feed does NOT provide live scores.* Do not use this feed to track in-progress or completed games.
        *   `datetime_utc` (string): Match start date and time in UTC. Example: `"19.11.2021 01:20"`. This is the most reliable timestamp for scheduling and time-based filtering.
*   `**<odds>` Element:** Contains odds information for the match.
    *   Attributes:
        *   `ts` (string): Last updated timestamp in milliseconds since the epoch. Example: `"1637154745703"`. Use this to determine the freshness of the odds data.
        *   `rotation_home` (string): Rotation number for the home team. Example: `"312"`.
        *   `rotation_away` (string): Rotation number for the away team. Example: `"311"`. These numbers are specific to the bookmaker and market.
*   `**<type>` Element:** Represents a betting market (e.g., Moneyline, Spread, Totals).
    *   Attributes:
        *   `value` (string): Market name. Example: `"Home/Away"`.
        *   `id` (string): Market ID. Example: `"1"`. *This ID is crucial for filtering and identifying specific bet types.*
    *   Known Market IDs and Names (Incomplete - Discover Dynamically): The following list is not exhaustive. The feed can introduce new markets at any time. Your code *must* be able to handle new markets dynamically. Store known Market IDs and Names in a configuration or database.
        *   `1`: `"Home/Away"` (Moneyline)
        *   `4`: `"Handicap"` (Spread)
        *   `3`: `"Over/Under"` (Totals)
        *   `5`: `"1st Half Winner"`
        *   And many others... Consult the full list in the original document and design your code to discover new markets.
*   `**<bookmaker>` Element:** Represents a specific bookmaker offering odds.
    *   Attributes:
        *   `name` (string): Bookmaker name. Example: `"Pinnacle"`.
        *   `extra` (string): Bookmaker-specific deeplink or ID (can be empty). Example: `""`.
        *   `id` (string): Bookmaker ID. Example: `"502"`. *This ID is crucial for filtering by specific bookmakers.*
    *   Known Bookmaker IDs and Names (Incomplete - Discover Dynamically): The following list is not exhaustive. The feed can introduce new bookmakers at any time. Your code *must* be able to handle new bookmakers dynamically. Store known Bookmaker IDs and Names in a configuration or database.
        *   `502`: `"Pinnacle"`
        *   `451`: `"Fanduel"`
        *   And many others... Consult the full list in the original document and design your code to discover new bookmakers.
*   `**<total>` Element (Only for Over/Under Markets):** Indicates the Over/Under value (the total number of points).
    *   Attributes:
        *   `name` (string): The Over/Under value (e.g., `"3.5"`). This value is usually a decimal number.
        *   `ismain` (string): `"1"` if this is the main line; `"0"` for alternative lines.
*   `**<handicap>` Element (Only for Handicap/Spread Markets):** Indicates the point spread.
    *   Attributes:
        *   `name` (string): The handicap value (e.g., `"-1.75"`). This value can be positive or negative.
        *   `ismain` (string): `"1"` if this is the main line; `"0"` for alternative lines.
        *   `stop` (string): Always `"False"`.
*   `**<odd>` Element:** Represents a single odd/price for a specific outcome.
    *   Attributes:
        *   `name` (string): Odd selection name (e.g., `"Under"`, `"2"` - home team wins, `"1"` - away team wins). The meaning of this value depends on the market.
        *   `value` (string): Decimal odds value (e.g., `"1.95"`). This is the most common format.
        *   `dp3` (string): Decimal odds value with 3-point rounding (e.g., `"1.952"`). This is redundant and can be ignored.
        *   `us` (string): US odds format (e.g., `"-105"`).
        *   `id` (string): Odd ID (unique).
        *   `handicap` (string, *only present for Handicap markets*): The handicap value associated with this odd. *This is crucial for correctly associating odds with the handicap value.*
*   **Rules and Considerations:**
    *   **GZIP Decompression:** *Critical!* Your code must handle GZIP decompression. This is essential for handling the feed correctly and avoiding timeouts.
    *   **Dynamic Markets and Bookmakers:** The feed can introduce new markets and bookmakers at any time. Design your code to discover these new entries dynamically.
    *   **Market and Bookmaker IDs:** Store known Market IDs and Bookmaker IDs in a configuration or database. This allows you to easily filter and process the feed based on your application's requirements.
    *   **Contest ID:** The `contestID` attribute is the primary key for linking odds data with match data from other feeds. Ensure that you store and index this value properly.
    *   **Time Handling:** Use `datetime_utc` for reliable scheduling. Convert to your application's preferred timezone as needed, but store it in UTC.
    *   **Status Filtering:** Only process matches with a status of `"Not Started"`. This feed does not provide information on in-progress or completed games.
    *   **Main Line Identification:** Use the `ismain` attribute of the `<total>` and `<handicap>` elements to identify the main lines for Over/Under and Spread bets.
    *   **Data Integrity:** Be aware that odds can fluctuate frequently. Store the `ts` (timestamp) attribute to track when the odds were last updated.
    *   **Filtering:** Use the `bm` and `market` parameters to filter the feed based on your application's requirements. This can significantly reduce the amount of data that you need to process.
*   **Code Structure Recommendations:**
    *   Create a dedicated class or module for handling odds data.
    *   Implement a cache or database to store odds data.
    *   Implement a background task or service to periodically refresh the odds data.
    *   Use a message queue or event system to notify other parts of your application when odds data changes.
*   **Error Handling:**
    *   Handle network errors gracefully. Implement retry mechanisms with exponential backoff.
    *   Log errors with detailed context (URL, timestamp, bookmaker, market).
    *   Implement circuit breaker pattern to prevent cascading failures.

***

### 6. Head-to-Head Comparison Feed - Comprehensive Ruleset

*   **Description:** Provides head-to-head statistics between two teams. Useful for providing historical context and informing betting decisions.
*   **URL Format:**
    *   `https://www.goalserve.com/getfeed/---------/bsktbl/h2h_{teamID1}-{teamID2}`
    *   Replace `---------` with your API key.
    *   Replace `{teamID1}` and `{teamID2}` with the Team IDs of the two teams you want to compare (separated by a hyphen "-"). The order of the IDs does not matter.
*   **Data Format:** XML (convertible to JSON with `?json=1`). Choose and maintain consistency.
*   **Time Zone:** Not explicitly time-zoned. The data reflects historical results without specific time context.
*   **Refresh Period:** Every 1 hour.
*   **High-Level Structure:** This feed does not have a well-defined root element, and the exact structure can vary based on the available data. The key is to identify the different sections within the feed and parse them accordingly.
*   **Key Data Sections:** The feed provides sections such as `top50`, `overall`, and `leagues`, all of which should be handled with different data models.
    *   **`top50` Section:** Likely represents the last 50 games between the two teams. It's assumed to contain a list of `<match>` elements (similar to the Tournament Schedule feed) with details about each game. The attributes within these elements should include:
        *   `date` (string): Match date.
        *   `hometeam_name` (string): Home team name.
        *   `hometeam_score` (string): Home team score.
        *   `awayteam_name` (string): Away team name.
        *   `awayteam_score` (string): Away team score.
        *   Other relevant attributes.
    *   **`overall` Section:** Provides overall win/loss statistics for the two teams. The structure will depend on wether its represented as XML or JSON.
         * For XML it would have elements with the name and the number of wins, losses, and draws, the root element can be named in different ways. For example,  `<team1 name="Los Angeles Lakers" wins="32" losses="15"/>`
         * For JSON, the data is represented as a record: ` { Los Angeles Lakers: { wins: "32", losses: "15" }} `
    *   **`leagues` Section:** Contains matches divided by tournaments or leagues. The contents will differ and should be parsed based on the tournament.

*   **Rules and Considerations:**

    *   **Team IDs are Essential:** You need the correct Team IDs to generate the URL. Use the Tournament Schedule or League Standings feed to obtain the correct Team IDs.
    *   **Missing Structure:** The lack of a well-defined schema makes this feed challenging to parse. Expect variations in the data structure.
    *   **Dynamic Parsing:** Implement dynamic parsing logic to handle the different sections (`top50`, `overall`, `leagues`).
    *   **Error Handling:** Implement robust error handling to deal with malformed XML or unexpected data structures.
    *   **Data Type Conversion:** Ensure that numeric attributes (scores, win/loss counts) are converted to appropriate numeric types.
    *   **Data Consistency:** Maintain consistency in team names and IDs with other feeds.
    *   **Limited Information:** Be aware that this feed provides historical context, but it does not provide real-time information or odds data. You will need to combine this data with other feeds for a more complete picture.
*   **Code Structure Recommendations:**

    *   Create a dedicated class or module for parsing the H2H feed.
    *   Use separate functions or methods to handle the different sections (`top50`, `overall`, `leagues`).
    *   Implement a flexible data model to accommodate the variations in the data structure.

***

You're absolutely right, I am still making mistakes. Apologies for the continued incompleteness. Let me finish the comprehensive ruleset for the Live Game Scores Feed. I will ensure it is complete this time.

***

### 7. Live Game Scores Feed - Comprehensive Ruleset (Complete)

*   **Description:** Provides live game scores, timer information, and detailed individual player statistics during a live game. Crucial for in-game betting analysis and fantasy sports applications.
*   **URL Format:**
    *   `https://www.goalserve.com/getfeed/---------/bsktbl/{league}-scores`
    *   Replace `---------` with your API key.
    *   Replace `{league}` with `nba`, `ncaa`, `wnba`, or `wncaa` for the corresponding leagues.
*   **Data Format:** XML (convertible to JSON with `?json=1`). Choose one and maintain consistency.
*   **Time Zone:** Eastern Time Zone (EST/EDT).
*   **Refresh Period:** Every 20 seconds. This feed provides near real-time data, so it is important to process it efficiently.
*   **Key Elements and Attributes:**
    *   **`<match>` Element:** Represents a single match with all live information.
        *   Attributes:
            *   `date` (string): Match start date (dd.MM.yyyy).
            *   `timezone` (string): Timezone (EST/EDT).
            *   `status` (string): Match status (Updating in LIVE). Possible values: Not Started, Postponed, Cancelled, Final, After Over Time, 1st Quarter, 2nd Quarter, 3rd Quarter, 4th Quarter, 1st Half, 2nd Half, Break Time, Overtime, Delayed, Interrupted.
            *   `time` (string): Match start time (H:mm).
            *   `timer` (string): Game timer (mm:ss). NBA/WNBA starts from 12:00 to 00:00. NCAA starts from 15:00. This is the *remaining* time in the current period.
            *   `datetime_utc` (string): Match start date and time in UTC.
            *   `venue_name` (string): Name of the venue.
            *   `venue_id` (string): Venue id
            *   `attendance` (string) match attendance updating afater game end
            *   `id` (string): Match ID. Key for linking to other feeds.
        *   Child Elements:
            *   `<hometeam>`: Contains data and stats for the team playing at home.
            *   `<awayteam>`: Contains data and stats for the away team.
            *   `<team_stats>` Contains the stats from every time. Is has nested `hometeam` and `awayteam` tags

*   **Team-Level Elements (`hometeam` and `awayteam`):**
    *   Attributes:
        *   `name` (string): Team name.
        *   `possession` (bool): True/False flag indicating if team has possession (when game is live).
        *   `q1`, `q2`, `q3`, `q4` (string): Quarter scores.
        *   `ot` (string): Overtime score.
        *   `totalscore` (string): Total score.
        *   `id` (string): Team id
    *   Child elements:
        *   `team_stats`: Teams match statistics. Separate for home and away teams
        *   `hometeam`, `awayteam`: Inside team_stats has field_goals_made , threepoint_goals_made, freethrows_goals_made,rebounds, assists, steals, blocks, turnovers, personal_fouls with the respective attempts and percentage

*   **Player-Level Elements:** Each team will have sections for Starters and Bench
    *   Inside `<hometeam>` or `<awayteam>` you'll find `<starters>` and `<bench>` elements. Each contains a list of `<player>` elements.

        *   For `<player>` elements
            *   `name` (string): Player name.
            *   `oncourt` (bool): True/False if player is on the court right now.
            *   `minutes` (string): Minutes played in the match.
            *   `field_goals_made` (string): Field goals scored (2PT + 3PT).
            *   `field_goals_attempts` (string): Field goals attempts.
            *   `threepoint_goals_made` (string): 3PT goals scored.
            *   `threepoint_goals_attempts` (string): 3PT goals attempts.
            *   `offence_rebounds` (string): Offensive rebounds.
            *   `defense_rebounds` (string): Defensive rebounds.
            *   `total_rebounds` (string): Total rebounds.
            *   `assists` (string): Assists.
            *   `steals` (string): Steals.
            *   `blocks` (string): Blocks.
            *   `turnovers` (string): Turnovers.
            *   `personal_fouls` (string): Personal fouls.
            *   `plus_minus` (string): Plus/minus.
            *   `points` (string): Points.
            *   `id` (string): Player ID.

*   **Rules and Considerations:**
    *   **Near Real-Time Updates:** This feed updates every 20 seconds. Design your system to handle this high frequency of updates efficiently.
    *   **Team and Player Identification:** Use consistent Team IDs and Player IDs across all feeds to link data correctly.
    *   **Game Status:** Pay close attention to the `status` attribute of the `<match>` element. The value of this attribute determines the state of the game (e.g., Not Started, 1st Quarter, Final).
    *   **Time Management:** Track the `timer` attribute to determine the remaining time in the current period. Use this information to provide accurate in-game statistics and insights.
    *   **Data Consistency:** Validate data types and ranges. Ensure that scores are valid integers, and percentages are valid decimal numbers.
    *   **Possession Tracking:** Use the `possession` attribute of the `<hometeam>` and `<awayteam>` elements to track which team has possession of the ball. Note: The accuracy of this information may vary.
    *   **Starter vs. Bench:** Use the `starters` and `bench` elements to distinguish between starting players and bench players.
*   **Code Structure Recommendations:**
    *   Create separate classes or modules for handling game data, team data, and player data.
    *   Use a caching mechanism to store frequently accessed data.
    *   Implement a multithreaded or asynchronous architecture to handle the high frequency of updates.
*   **Error Handling:**
    *   Implement robust error handling to handle network errors, invalid data formats, and unexpected values.
    *   Log errors with detailed context.
*   **Data Example Snippet (Match, Teams, and Players):**

```xml
<match date="16.11.2024" timezone="EST" status="1st Quarter" time="3:00 PM" timer="10:30" formatted_date="16.11.2024" datetime_utc="16.11.2024 20:00" venue_name="Spectrum Center, Charlotte, NC" venue_id="1030" attendance="19145" id="292536">
    <hometeam name="Charlotte Hornets" possession="False" q1="33" q2="26" q3="" q4="" ot="" totalscore="59" id="1185" />
    <awayteam name="Boston Celtics" possession="True" q1="30" q2="28" q3="" q4="" ot="" totalscore="58" id="1067" />
    <team_stats>
        <hometeam>
            <field_goals_made total="42" attempts="91" pct="46.2" />
            <threepoint_goals_made total="18" attempts="55" pct="32.7" />
            <freethrows_goals_made total="14" attempts="21" pct="66.7" />
            <rebounds total="56" offence="15" defense="41" />
            <assists total="25" />
            <steals total="3" />
            <blocks total="5" />
            <turnovers total="17" />
            <personal_fouls total="12" />
        </hometeam>
        <awayteam>
            <field_goals_made total="42" attempts="96" pct="66.7" />
            <threepoint_goals_made total="9" attempts="39" pct="23.1" />
            <freethrows_goals_made total="10" attempts="12" pct="83.3" />
            <rebounds total="38" offence="9" defense="29" />
            <assists total="30" />
            <steals total="9" />
            <blocks total="2" />
            <turnovers total="8" />
            <personal_fouls total="16" />
        </awayteam>
    </team_stats>
    <hometeam>
        <starters>
            <player name="J. Tatum" oncourt="False" pos="" minutes="38" field_goals_made="12" field_goals_attempts="25" threepoint_goals_made="4" threepoint_goals_attempts="14" freethrows_goals_made="4" freethrows_goals_attempts="8" offence_rebounds="1" defense_rebounds="13" total_rebounds="14" assists="7" steals="0" blocks="1" turnovers="2" personal_fouls="3" plus_minus="+12" points="32" id="4065648" />
        </starters>
        <bench>
            <player ... />
        </bench>
    </hometeam>
</match>
```


